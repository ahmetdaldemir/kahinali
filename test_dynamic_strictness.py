#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Dinamik SÄ±kÄ±lÄ±k Sistemi Testi
"""

import sys
import os
sys.path.insert(0, os.path.abspath('.'))

from modules.dynamic_strictness import dynamic_strictness
import numpy as np
from datetime import datetime

def test_dynamic_strictness():
    """Dinamik sÄ±kÄ±lÄ±k sistemini test et"""
    print("=" * 60)
    print("ğŸ¤– DÄ°NAMÄ°K SIKILIK SÄ°STEMÄ° TESTÄ°")
    print("=" * 60)
    
    # Test 1: BaÅŸlangÄ±Ã§ durumu
    print("\nğŸ“Š TEST 1: BaÅŸlangÄ±Ã§ Durumu")
    print("-" * 40)
    initial_status = dynamic_strictness.get_current_status()
    print(f"Mevcut sÄ±kÄ±lÄ±k: {initial_status['current_strictness']:.2f}")
    print(f"SÄ±kÄ±lÄ±k seviyesi: {initial_status['strictness_level']}")
    print(f"Ã–neri: {initial_status['recommendation']}")
    
    # Test 2: GÃ¼Ã§lÃ¼ yÃ¼kseliÅŸ senaryosu
    print("\nğŸ“ˆ TEST 2: GÃ¼Ã§lÃ¼ YÃ¼kseliÅŸ Senaryosu")
    print("-" * 40)
    bullish_market = {
        'price_data': [100, 102, 105, 108, 112, 115, 118, 122, 125, 128, 130],
        'technical_indicators': {
            'rsi': 75,  # AÅŸÄ±rÄ± alÄ±m
            'macd': 0.8  # GÃ¼Ã§lÃ¼ yÃ¼kseliÅŸ
        },
        'volume_data': [1000, 1200, 1500, 1800, 2000, 2200, 2500, 2800, 3000, 3200, 3500],
        'sentiment_data': {
            'overall_sentiment': 0.8  # Ã‡ok pozitif
        },
        'ai_predictions': {
            'confidence': 0.9  # YÃ¼ksek gÃ¼ven
        }
    }
    
    bullish_result = dynamic_strictness.update_strictness(bullish_market)
    print(f"Yeni sÄ±kÄ±lÄ±k: {bullish_result['current_strictness']:.2f}")
    print(f"Sebep: {bullish_result['strictness_level']}")
    print(f"Ã–neri: {bullish_result['recommendation']}")
    
    # Test 3: DÃ¼ÅŸÃ¼ÅŸ senaryosu
    print("\nğŸ“‰ TEST 3: DÃ¼ÅŸÃ¼ÅŸ Senaryosu")
    print("-" * 40)
    bearish_market = {
        'price_data': [100, 98, 95, 92, 89, 86, 83, 80, 77, 74, 70],
        'technical_indicators': {
            'rsi': 25,  # AÅŸÄ±rÄ± satÄ±m
            'macd': -0.6  # GÃ¼Ã§lÃ¼ dÃ¼ÅŸÃ¼ÅŸ
        },
        'volume_data': [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000],
        'sentiment_data': {
            'overall_sentiment': 0.2  # Ã‡ok negatif
        },
        'ai_predictions': {
            'confidence': 0.3  # DÃ¼ÅŸÃ¼k gÃ¼ven
        }
    }
    
    bearish_result = dynamic_strictness.update_strictness(bearish_market)
    print(f"Yeni sÄ±kÄ±lÄ±k: {bearish_result['current_strictness']:.2f}")
    print(f"Sebep: {bearish_result['strictness_level']}")
    print(f"Ã–neri: {bearish_result['recommendation']}")
    
    # Test 4: Sideways senaryosu
    print("\nğŸ”„ TEST 4: Sideways Senaryosu")
    print("-" * 40)
    sideways_market = {
        'price_data': [100, 101, 99, 102, 98, 103, 97, 104, 96, 105, 100],
        'technical_indicators': {
            'rsi': 50,  # NÃ¶tr
            'macd': 0.1  # ZayÄ±f sinyal
        },
        'volume_data': [1000, 1050, 1100, 1050, 1000, 1050, 1100, 1050, 1000, 1050, 1100],
        'sentiment_data': {
            'overall_sentiment': 0.5  # NÃ¶tr
        },
        'ai_predictions': {
            'confidence': 0.6  # Orta gÃ¼ven
        }
    }
    
    sideways_result = dynamic_strictness.update_strictness(sideways_market)
    print(f"Yeni sÄ±kÄ±lÄ±k: {sideways_result['current_strictness']:.2f}")
    print(f"Sebep: {sideways_result['strictness_level']}")
    print(f"Ã–neri: {sideways_result['recommendation']}")
    
    # Test 5: GeÃ§miÅŸ kontrolÃ¼
    print("\nğŸ“ˆ TEST 5: GeÃ§miÅŸ KontrolÃ¼")
    print("-" * 40)
    history = dynamic_strictness.strictness_history
    print(f"Toplam geÃ§miÅŸ kayÄ±t: {len(history)}")
    
    if history:
        print("\nSon 5 deÄŸiÅŸiklik:")
        for i, record in enumerate(history[-5:], 1):
            change = record['new_strictness'] - record['old_strictness']
            change_text = f"+{change:.2f}" if change > 0 else f"{change:.2f}"
            print(f"{i}. {record['timestamp'][:19]} | {record['old_strictness']:.2f} â†’ {record['new_strictness']:.2f} ({change_text})")
            print(f"   Sebep: {record['reason']}")
    
    # Test 6: Durum kaydetme/yÃ¼kleme
    print("\nğŸ’¾ TEST 6: Durum Kaydetme/YÃ¼kleme")
    print("-" * 40)
    dynamic_strictness.save_status("test_strictness.json")
    print("âœ… Durum kaydedildi")
    
    # Yeni instance oluÅŸtur ve yÃ¼kle
    from modules.dynamic_strictness import DynamicStrictness
    new_instance = DynamicStrictness()
    new_instance.load_status("test_strictness.json")
    print(f"âœ… Durum yÃ¼klendi: {new_instance.current_strictness:.2f}")
    
    # Test dosyasÄ±nÄ± temizle
    if os.path.exists("test_strictness.json"):
        os.remove("test_strictness.json")
        print("âœ… Test dosyasÄ± temizlendi")
    
    print("\n" + "=" * 60)
    print("âœ… DÄ°NAMÄ°K SIKILIK SÄ°STEMÄ° TESTÄ° TAMAMLANDI")
    print("=" * 60)
    
    return True

if __name__ == "__main__":
    test_dynamic_strictness() 