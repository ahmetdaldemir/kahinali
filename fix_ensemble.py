import pandas as pd
import pickle
import joblib
from sklearn.ensemble import VotingClassifier, RandomForestClassifier, GradientBoostingClassifier

print("ðŸ”§ Ensemble Model DÃ¼zeltiliyor...")
print("=" * 50)

# 1. Veriyi yÃ¼kle
print("ðŸ“Š Veri yÃ¼kleniyor...")
df = pd.read_csv('data/processed_training_data.csv')
feature_cols = joblib.load('models/feature_cols.pkl')
X = df[feature_cols].values
y = df['label_dynamic'].values
print(f"âœ“ Veri yÃ¼klendi: {X.shape}")

# 2. Yeni modeller oluÅŸtur ve eÄŸit
print("ðŸ¤– Yeni modeller eÄŸitiliyor...")
rf = RandomForestClassifier(n_estimators=100, random_state=42)
gb = GradientBoostingClassifier(n_estimators=100, random_state=42)

rf.fit(X, y)
gb.fit(X, y)
print("âœ“ RF ve GB modelleri eÄŸitildi")

# 3. Ensemble oluÅŸtur ve fit et
print("ðŸŽ¯ Ensemble model oluÅŸturuluyor...")
ensemble = VotingClassifier(
    estimators=[('rf', rf), ('gb', gb)],
    voting='soft'
)
ensemble.fit(X, y)
print("âœ“ Ensemble model fit edildi")

# 4. TÃ¼m modelleri kaydet
print("ðŸ’¾ Modeller kaydediliyor...")
joblib.dump(rf, 'models/rf_model.pkl')
joblib.dump(gb, 'models/gb_model.pkl')

with open('models/ensemble_model.pkl', 'wb') as f:
    pickle.dump(ensemble, f)

# 5. Feature importance gÃ¼ncelle
feature_importance = {
    'rf_importance': rf.feature_importances_,
    'gb_importance': gb.feature_importances_
}
with open('models/feature_importance.pkl', 'wb') as f:
    pickle.dump(feature_importance, f)

# 6. Models dict gÃ¼ncelle
models_dict = {
    'ensemble': ensemble,
    'rf': rf,
    'gb': gb,
    'lstm': 'models/lstm_model.h5'
}
with open('models/models.pkl', 'wb') as f:
    pickle.dump(models_dict, f)

print("âœ… TÃ¼m modeller baÅŸarÄ±yla gÃ¼ncellendi!")
print("=" * 50) 